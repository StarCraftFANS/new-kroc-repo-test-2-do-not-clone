--
--	IO utilities
--	Copyright (C) 2009, 2010 Adam Sampson <ats@offog.org>
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation, either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library.  If not, see
--	<http://www.gnu.org/licenses/>.
--

--** @module useful

#IF DEFINED (WITH.IO)
#INCLUDE "file.module"
#ENDIF

#IF DEFINED (WITH.IO)
--{{{  PROC fd.read.bytes
--* Read bytes from [@code fd] until EOF, then output [@code 0].
PROC fd.read.bytes (VAL INT fd, CHAN BYTE out!)
  INITIAL BOOL reading IS TRUE:
  WHILE reading
    INT count:
    [512]BYTE buf:
    SEQ
      file.read (fd, buf, count)
      IF
        count = 0
          SEQ
            reading := FALSE
            out ! 0
        count = (-1)
          -- FIXME: handle error more gracefully
          CAUSEERROR ()
        TRUE
          SEQ i = 0 FOR count
            out ! buf[i]
:
--}}}
#ENDIF
--{{{  PROC bytes.to.lines
--* Turn a stream of bytes into a stream of lines.
-- Lines are terminated by [@code *n], which is included in the output.
-- EOF on input is marked by [@code 0], and on output by [@code []].
PROC bytes.to.lines (CHAN BYTE in?, CHAN MOBILE []BYTE out!)
  SEQ
    INITIAL BOOL reading IS TRUE:
    WHILE reading
      INITIAL INT len IS 0:
      [512]BYTE buf:
      MOBILE []BYTE s:
      SEQ
        --{{{  read line into buf
        INITIAL BOOL scanning IS TRUE:
        WHILE scanning AND (len < (SIZE buf))
          SEQ
            in ? buf[len]
            CASE buf[len]
              0
                scanning, reading := FALSE, FALSE
              '*n'
                len, scanning := len + 1, FALSE
              ELSE
                len := len + 1
        --}}}
        IF
          len > 0
            SEQ
              s := MOBILE [len]BYTE
              [s FOR len] := [buf FOR len]
              out ! s
          TRUE
            SKIP
    out ! MOBILE [0]BYTE
:
--}}}
