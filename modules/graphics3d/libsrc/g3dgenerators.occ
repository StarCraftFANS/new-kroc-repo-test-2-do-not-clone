--
--	g3dgenerators.occ -- graphics-3D generators
--	Copyright (C) 2008-2010 Fred Barnes <frmb@kent.ac.uk>
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
--

--** @module graphics3d

#INCLUDE "course.module"
#INCLUDE "maths.module"
#INCLUDE "sdlraster.module"
#INCLUDE "graphics3d.inc"


--{{{  PROC flatpolypoints.generator (CHAN INT trigger?, VAL INT npoints, VAL REAL32 rad, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Flat 3D polygon generator.
-- Generates a regular N-sided polygon in 3D space (laying down flat by default).
--
-- @param trigger Trigger channel.
-- @param npoints Number of points.
-- @param rad Radius (of points from centre).
-- @param out Generated points.
-- @param ctrl Control channel.
--
PROC flatpolypoints.generator (CHAN INT trigger?, VAL INT npoints, VAL REAL32 rad, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 cpnts:
  INT npnts:
  REAL32 height:

  PROC reset () --{{{
    SEQ
      npnts := (npoints * 2) + 2

      cpnts := MOBILE [npnts]G3D.POINT3

      #PRAGMA DEFINED cpnts

      INITIAL REAL32 apt IS (PI * 2.0) / (REAL32 ROUND npoints):
      SEQ i = 0 FOR npoints
        REAL32 aoffs:
        SEQ
          aoffs := apt * (REAL32 ROUND i)
          cpnts[i] := [rad * SIN (aoffs), -(height / 2.0), rad * COS (aoffs)]
          cpnts[i+npoints] := cpnts[i]
          cpnts[i+npoints][y] := height / 2.0

      -- last two points are top and bottom centres
      cpnts[npnts - 2] := [0.0, -(height / 2.0), 0.0]
      cpnts[npnts - 1] := [0.0, height / 2.0, 0.0]

  :
  --}}}

  SEQ
    --{{{  initialise
    height := 1.0
    reset ()

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              reset ()
            [3]REAL32 scale:
            add.scale; scale
              SEQ i = 0 FOR npnts
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
            [3]REAL32 scale:
            set.scale; scale
              SEQ
                height := 1.0
                reset ()
                SEQ i = 0 FOR npnts
                  SEQ
                    cpnts[i][x] := cpnts[i][x] * scale[0]
                    cpnts[i][y] := cpnts[i][y] * scale[1]
                    cpnts[i][z] := cpnts[i][z] * scale[2]
            [3]REAL32 trans:
            add.trans; trans
              SEQ i = 0 FOR npnts
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
            [3]REAL32 trans:
            set.trans; trans
              SEQ
                height := 1.0
                reset ()
                SEQ i = 0 FOR npnts
                  SEQ
                    cpnts[i][x] := cpnts[i][x] + trans[0]
                    cpnts[i][y] := cpnts[i][y] + trans[1]
                    cpnts[i][z] := cpnts[i][z] + trans[2]
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC cogpoints.generator (...)
--* Cog points generator.
-- Generates a stream of points that represent a cog in 3D space (laying down flat by default).
--
-- @param trigger Trigger channel.
-- @param nteeth Number of teeth on the cog.
-- @param i.rad Inner radius (where teeth start).
-- @param o.rad Outer raduis (where teeth end).
-- @param i.ang Inner tooth angle (between teeth bottoms).
-- @param o.ang Outer tooth angle (of teeth ends).
-- @param out Generated points.
-- @param ctrl Control channel.
--
PROC cogpoints.generator (CHAN INT trigger?, VAL INT nteeth, VAL REAL32 i.rad, o.rad, i.ang, o.ang,
                          CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 cpnts:
  INT npoints:
  REAL32 height:

  PROC reset () --{{{
    SEQ
      npoints := (nteeth * 8) + 2

      cpnts := MOBILE [npoints]G3D.POINT3

      #PRAGMA DEFINED cpnts

      INITIAL INT pskip IS nteeth * 4:
      INITIAL REAL32 apt IS (PI * 2.0) / (REAL32 ROUND nteeth):
      INITIAL REAL32 i.ang IS (i.ang / 2.0):
      INITIAL REAL32 o.ang IS (o.ang / 2.0):
      SEQ i = 0 FOR nteeth
        REAL32 aoffs:
        INT pstart:
        SEQ
          aoffs := apt * (REAL32 ROUND i)
          pstart := i * 4
          cpnts[pstart + 0] := [i.rad * SIN (aoffs-i.ang), 0.0, i.rad * COS (aoffs-i.ang)]
          cpnts[pstart + 1] := [o.rad * SIN (aoffs-o.ang), 0.0, o.rad * COS (aoffs-o.ang)]
          IF
            o.ang = 0.0
              cpnts[pstart + 2] := cpnts[pstart + 1]
            TRUE
              cpnts[pstart + 2] := [o.rad * SIN (aoffs+o.ang), 0.0, o.rad * COS (aoffs+o.ang)]
          cpnts[pstart + 3] := [i.rad * SIN (aoffs+i.ang), 0.0, i.rad * COS (aoffs+i.ang)]

          SEQ j = 0 FOR 4
            SEQ
              cpnts[(pstart + j) + pskip] := cpnts[pstart + j]
              cpnts[(pstart + j)][y] := -(height / 2.0)
              cpnts[(pstart + j) + pskip][y] := (height / 2.0)
      -- last two points are top and bottom centres
      cpnts[npoints - 2] := [0.0, -(height / 2.0), 0.0]
      cpnts[npoints - 1] := [0.0, height / 2.0, 0.0]
  :
  --}}}

  SEQ
    --{{{  initialise
    height := 1.0
    reset ()

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              reset ()
            [3]REAL32 scale:
            add.scale; scale
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
            [3]REAL32 scale:
            set.scale; scale
              SEQ
                height := 1.0
                reset ()
                SEQ i = 0 FOR npoints
                  SEQ
                    cpnts[i][x] := cpnts[i][x] * scale[0]
                    cpnts[i][y] := cpnts[i][y] * scale[1]
                    cpnts[i][z] := cpnts[i][z] * scale[2]
            [3]REAL32 trans:
            add.trans; trans
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
            [3]REAL32 trans:
            set.trans; trans
              SEQ
                height := 1.0
                reset ()
                SEQ i = 0 FOR npoints
                  SEQ
                    cpnts[i][x] := cpnts[i][x] + trans[0]
                    cpnts[i][y] := cpnts[i][y] + trans[1]
                    cpnts[i][z] := cpnts[i][z] + trans[2]
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC cubepoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Cube point generator.
-- Generates a constant stream of points that represent a cube in 3D space.
--
-- @param trigger Trigger channel.
-- @param out Points generated.
-- @param ctrl Control channel.
--
PROC cubepoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 cpnts, opnts:

  PROC reset () --{{{
    SEQ
      opnts := MOBILE [8]G3D.POINT3

      opnts[0] := [1.0, 1.0, 1.0] (G3D.POINT3)
      opnts[1] := [1.0, -1.0, 1.0] (G3D.POINT3)
      opnts[2] := [-1.0, -1.0, 1.0] (G3D.POINT3)
      opnts[3] := [-1.0, 1.0, 1.0] (G3D.POINT3)
      opnts[4] := [1.0, 1.0, -1.0] (G3D.POINT3)
      opnts[5] := [1.0, -1.0, -1.0] (G3D.POINT3)
      opnts[6] := [-1.0, -1.0, -1.0] (G3D.POINT3)
      opnts[7] := [-1.0, 1.0, -1.0] (G3D.POINT3)
  :
  --}}}

  SEQ
    --{{{  initialise
    reset ()
    cpnts := CLONE opnts

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              SEQ
                reset ()
                cpnts := CLONE opnts
            [3]REAL32 scale:
            add.scale; scale
              --{{{  add scale (to cpnts)
              SEQ i = 0 FOR 8
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
              --}}}
            [3]REAL32 scale:
            set.scale; scale
              --{{{  set scale (from opnts)
              SEQ i = 0 FOR 8
                SEQ
                  cpnts[i][x] := opnts[i][x] * scale[0]
                  cpnts[i][y] := opnts[i][y] * scale[1]
                  cpnts[i][z] := opnts[i][z] * scale[2]
              --}}}
            [3]REAL32 trans:
            add.trans; trans
              --{{{  add translation (to cpnts)
              SEQ i = 0 FOR 8
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
              --}}}
            [3]REAL32 trans:
            set.trans; trans
              --{{{  set translation (from opnts)
              SEQ i = 0 FOR 8
                SEQ
                  cpnts[i][x] := opnts[i][x] + trans[0]
                  cpnts[i][y] := opnts[i][y] + trans[1]
                  cpnts[i][z] := opnts[i][z] + trans[2]
              --}}}
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC fbypoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Inmos butterfly logo generator.
-- The pixel positions were generated by tracing from an Inmos promotional
-- video showing the butterflies running on a Transputer network.
--
-- @param trigger Trigger channel.
-- @param out Points generated.
-- @param ctrl Control channel.
--
PROC fbypoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 pnts:
  REAL32 fangle, fdiff:

  PROC reset () --{{{
    SEQ
      pnts := MOBILE [30]G3D.POINT3

      -- top-left wing
      pnts[0] := [-0.8, -0.8, 0.0] (G3D.POINT3)
      pnts[1] := [-0.4, -0.8, 0.0] (G3D.POINT3)
      pnts[2] := [-0.15, -0.6, 0.0] (G3D.POINT3)
      pnts[3] := [-0.06, 0.2, 0.0] (G3D.POINT3)
      pnts[4] := [-0.4, 0.5, 0.0] (G3D.POINT3)
      pnts[5] := [-0.7, 0.5, 0.0] (G3D.POINT3)
      pnts[6] := [-1.0, -0.6, 0.0] (G3D.POINT3)

      -- top-right wing
      pnts[7] := [0.4, -0.8, 0.0] (G3D.POINT3)
      pnts[8] := [0.8, -0.8, 0.0] (G3D.POINT3)
      pnts[9] := [1.0, -0.6, 0.0] (G3D.POINT3)
      pnts[10] := [0.7, 0.5, 0.0] (G3D.POINT3)
      pnts[11] := [0.4, 0.5, 0.0] (G3D.POINT3)
      pnts[12] := [0.06, 0.2, 0.0] (G3D.POINT3)
      pnts[13] := [0.15, -0.6, 0.0] (G3D.POINT3)

      -- body extras
      pnts[14] := [0.0, -0.7, 0.0] (G3D.POINT3)
      pnts[15] := [0.0, 0.9, 0.0] (G3D.POINT3)

      -- bottom-left wing
      pnts[16] := [-0.6, 0.4, 0.0] (G3D.POINT3)
      pnts[17] := [-0.04, 0.5, 0.0] (G3D.POINT3)
      pnts[18] := [-0.2, 0.8, 0.0] (G3D.POINT3)
      pnts[19] := [-0.5, 1.0, 0.0] (G3D.POINT3)
      pnts[20] := [-0.8, 0.8, 0.0] (G3D.POINT3)

      -- bottom-right wing
      pnts[21] := [0.6, 0.4, 0.0] (G3D.POINT3)
      pnts[22] := [0.8, 0.8, 0.0] (G3D.POINT3)
      pnts[23] := [0.5, 1.0, 0.0] (G3D.POINT3)
      pnts[24] := [0.2, 0.8, 0.0] (G3D.POINT3)
      pnts[25] := [0.04, 0.5, 0.0] (G3D.POINT3)

      -- feelers
      pnts[26] := [-0.1, -0.65, 0.0] (G3D.POINT3)
      pnts[27] := [0.1, -0.65, 0.0] (G3D.POINT3)
      pnts[28] := [-0.2, -1.0, 0.0] (G3D.POINT3)
      pnts[29] := [0.2, -1.0, 0.0] (G3D.POINT3)

      fangle := 0.0
      fdiff := 0.05
  :
  --}}}
  PROC rot.point.y (G3D.POINT3 pnt, VAL REAL32 sin.val, cos.val) --{{{
    REAL32 tmp:
    SEQ
      tmp := pnt[x]
      pnt[x] := (pnt[x] * cos.val) + (pnt[z] * sin.val)
      pnt[z] := (pnt[z] * cos.val) - (tmp * sin.val)
  :
  --}}}

  SEQ
    --{{{  initialise
    reset ()

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ

        PRI ALT
          INT any:
          trigger ? any
            MOBILE []G3D.POINT3 mpoints:
            SEQ
              mpoints := CLONE pnts

              --{{{  adjust wings for fluttering.
              IF
                fdiff > 0.0
                  REAL32 sin.val, cos.val:
                  SEQ
                    sin.val := SIN (fangle)
                    cos.val := COS (fangle)
                    fangle := fangle + fdiff

                    rot.point.y (mpoints[0], sin.val, cos.val)
                    rot.point.y (mpoints[1], sin.val, cos.val)
                    rot.point.y (mpoints[6], sin.val, cos.val)
                    rot.point.y (mpoints[5], sin.val, cos.val)
                    rot.point.y (mpoints[4], sin.val, cos.val)
                    rot.point.y (mpoints[16], sin.val, cos.val)
                    rot.point.y (mpoints[20], sin.val, cos.val)
                    rot.point.y (mpoints[19], sin.val, cos.val)
                    rot.point.y (mpoints[18], sin.val, cos.val)

                    sin.val := -sin.val

                    rot.point.y (mpoints[7], sin.val, cos.val)
                    rot.point.y (mpoints[8], sin.val, cos.val)
                    rot.point.y (mpoints[9], sin.val, cos.val)
                    rot.point.y (mpoints[10], sin.val, cos.val)
                    rot.point.y (mpoints[11], sin.val, cos.val)
                    rot.point.y (mpoints[21], sin.val, cos.val)
                    rot.point.y (mpoints[22], sin.val, cos.val)
                    rot.point.y (mpoints[23], sin.val, cos.val)
                    rot.point.y (mpoints[24], sin.val, cos.val)

                    IF
                      fangle > 0.5
                        fdiff := -fdiff
                      TRUE
                        SKIP
                fdiff < 0.0
                  REAL32 sin.val, cos.val:
                  SEQ
                    sin.val := SIN (fangle)
                    cos.val := COS (fangle)
                    fangle := fangle + fdiff

                    rot.point.y (mpoints[0], sin.val, cos.val)
                    rot.point.y (mpoints[1], sin.val, cos.val)
                    rot.point.y (mpoints[6], sin.val, cos.val)
                    rot.point.y (mpoints[5], sin.val, cos.val)
                    rot.point.y (mpoints[4], sin.val, cos.val)
                    rot.point.y (mpoints[16], sin.val, cos.val)
                    rot.point.y (mpoints[20], sin.val, cos.val)
                    rot.point.y (mpoints[19], sin.val, cos.val)
                    rot.point.y (mpoints[18], sin.val, cos.val)

                    sin.val := -sin.val

                    rot.point.y (mpoints[7], sin.val, cos.val)
                    rot.point.y (mpoints[8], sin.val, cos.val)
                    rot.point.y (mpoints[9], sin.val, cos.val)
                    rot.point.y (mpoints[10], sin.val, cos.val)
                    rot.point.y (mpoints[11], sin.val, cos.val)
                    rot.point.y (mpoints[21], sin.val, cos.val)
                    rot.point.y (mpoints[22], sin.val, cos.val)
                    rot.point.y (mpoints[23], sin.val, cos.val)
                    rot.point.y (mpoints[24], sin.val, cos.val)

                    IF
                      fangle < (-0.5)
                        fdiff := -fdiff
                      TRUE
                        SKIP
                TRUE
                  SKIP
              --}}}

              out ! mpoints
          ctrl ? CASE
            reset
              reset ()
            [3]REAL32 scale:
            add.scale; scale
              SEQ i = 0 FOR 30
                SEQ
                  pnts[i][x] := pnts[i][x] * scale[0]
                  pnts[i][y] := pnts[i][y] * scale[1]
                  pnts[i][z] := pnts[i][z] * scale[2]
            [3]REAL32 scale:
            set.scale; scale
              SKIP
            [3]REAL32 trans:
            add.trans; trans
              SEQ i = 0 FOR 30
                SEQ
                  pnts[i][x] := pnts[i][x] + trans[0]
                  pnts[i][y] := pnts[i][y] + trans[1]
                  pnts[i][z] := pnts[i][z] + trans[2]
            [3]REAL32 trans:
            set.trans; trans
              SKIP
:
--}}}
--{{{  PROC squarepoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Flat square point generator.
-- Generates a square around the origin (lying flat by default).
--
-- @param trigger Trigger channel.
-- @param out Points generated.
-- @param ctrl Control channel.
--
PROC squarepoints.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 cpnts, opnts:

  PROC reset () --{{{
    SEQ
      opnts := MOBILE [4]G3D.POINT3

      opnts[0] := [1.0, 0.0, 1.0]
      opnts[1] := [1.0, 0.0, -1.0]
      opnts[2] := [-1.0, 0.0, -1.0]
      opnts[3] := [-1.0, 0.0, 1.0]
  :
  --}}}

  SEQ
    --{{{  initialise
    reset ()
    cpnts := CLONE opnts

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              SEQ
                reset ()
                cpnts := CLONE opnts
            [3]REAL32 scale:
            add.scale; scale
              --{{{  add scale (to cpnts)
              SEQ i = 0 FOR 4
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
              --}}}
            [3]REAL32 scale:
            set.scale; scale
              --{{{  set scale (from opnts)
              SEQ i = 0 FOR 4
                SEQ
                  cpnts[i][x] := opnts[i][x] * scale[0]
                  cpnts[i][y] := opnts[i][y] * scale[1]
                  cpnts[i][z] := opnts[i][z] * scale[2]
              --}}}
            [3]REAL32 trans:
            add.trans; trans
              --{{{  add translation (to cpnts)
              SEQ i = 0 FOR 4
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
              --}}}
            [3]REAL32 trans:
            set.trans; trans
              --{{{  set translation (from opnts)
              SEQ i = 0 FOR 4
                SEQ
                  cpnts[i][x] := opnts[i][x] + trans[0]
                  cpnts[i][y] := opnts[i][y] + trans[1]
                  cpnts[i][z] := opnts[i][z] + trans[2]
              --}}}
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC gridpoints.generator (CHAN INT trigger?, VAL INT nx, nz, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Flat grid points generator.
-- Generates a set of points used to draw a grid (lying flat by default).  The default size is 2.0 by 2.0.
--
-- @param trigger Trigger channel.
-- @param nx Number of points on X axis (including edges).
-- @param nz Number of points on Z axis (including edges).
-- @param out Points generated.
-- @param ctrl Control channel.
--
PROC gridpoints.generator (CHAN INT trigger?, VAL INT nx, nz, CHAN MOBILE []G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3 cpnts, opnts:
  INT npoints:

  PROC reset () --{{{
    REAL32 sx, sz:
    INITIAL INT pp IS 0:
    SEQ
      opnts := MOBILE [npoints]G3D.POINT3

      sx := 2.0 / (REAL32 TRUNC (nx - 1))
      sz := 2.0 / (REAL32 TRUNC (nz - 1))

      SEQ x = 0 FOR nx
        REAL32 tx:
        SEQ
          tx := (-1.0) + (sx * (REAL32 TRUNC x))
          opnts[pp] := [tx, 0.0, -1.0]
          opnts[pp+1] := [tx, 0.0, 1.0]
          pp := pp + 2

      SEQ z = 0 FOR nz
        REAL32 tz:
        SEQ
          tz := (-1.0) + (sz * (REAL32 TRUNC z))
          opnts[pp] := [-1.0, 0.0, tz]
          opnts[pp+1] := [1.0, 0.0, tz]
          pp := pp + 2
  :
  --}}}

  SEQ
    --{{{  initialise
    npoints := (nx * 2) + (nz * 2)
    reset ()
    cpnts := CLONE opnts

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              SEQ
                reset ()
                cpnts := CLONE opnts
            [3]REAL32 scale:
            add.scale; scale
              --{{{  add scale (to cpnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
              --}}}
            [3]REAL32 scale:
            set.scale; scale
              --{{{  set scale (from opnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := opnts[i][x] * scale[0]
                  cpnts[i][y] := opnts[i][y] * scale[1]
                  cpnts[i][z] := opnts[i][z] * scale[2]
              --}}}
            [3]REAL32 trans:
            add.trans; trans
              --{{{  add translation (to cpnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
              --}}}
            [3]REAL32 trans:
            set.trans; trans
              --{{{  set translation (from opnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := opnts[i][x] + trans[0]
                  cpnts[i][y] := opnts[i][y] + trans[1]
                  cpnts[i][z] := opnts[i][z] + trans[2]
              --}}}
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC spherepoint.generator (CHAN INT trigger?, VAL REAL32 rad, CHAN MOBILE []G3D.POINT3S out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Sphere generator (single).
-- Generates a single sphere at the origin.
--
-- @param trigger Trigger channel.
-- @param rad Radius.
-- @param out Sized points generated.
-- @param ctrl Control channel.
--
PROC spherepoint.generator (CHAN INT trigger?, VAL REAL32 rad, CHAN MOBILE []G3D.POINT3S out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE []G3D.POINT3S cpnts, opnts:
  INT npoints:

  PROC reset () --{{{
    SEQ
      opnts := MOBILE [npoints]G3D.POINT3S

      SEQ i = 0 FOR npoints
        opnts[i] := [0.0, 0.0, 0.0, rad]
  :
  --}}}

  SEQ
    --{{{  initialise
    npoints := 1
    reset ()
    cpnts := CLONE opnts

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            reset
              SEQ
                reset ()
                cpnts := CLONE opnts
            [3]REAL32 scale:
            add.scale; scale
              --{{{  add scale (to cpnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] * scale[0]
                  cpnts[i][y] := cpnts[i][y] * scale[1]
                  cpnts[i][z] := cpnts[i][z] * scale[2]
              --}}}
            [3]REAL32 scale:
            set.scale; scale
              --{{{  set scale (from opnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := opnts[i][x] * scale[0]
                  cpnts[i][y] := opnts[i][y] * scale[1]
                  cpnts[i][z] := opnts[i][z] * scale[2]
              --}}}
            [3]REAL32 trans:
            add.trans; trans
              --{{{  add translation (to cpnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := cpnts[i][x] + trans[0]
                  cpnts[i][y] := cpnts[i][y] + trans[1]
                  cpnts[i][z] := cpnts[i][z] + trans[2]
              --}}}
            [3]REAL32 trans:
            set.trans; trans
              --{{{  set translation (from opnts)
              SEQ i = 0 FOR npoints
                SEQ
                  cpnts[i][x] := opnts[i][x] + trans[0]
                  cpnts[i][y] := opnts[i][y] + trans[1]
                  cpnts[i][z] := opnts[i][z] + trans[2]
              --}}}
          INT any:
          trigger ? any
            out ! CLONE cpnts
:
--}}}
--{{{  PROC heightfieldpoint.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT2.3R adjust?, VAL [][]REAL32 imap, CHAN MOBILE [][]G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
--* Height-field points generator.
-- Generates a set of points used to draw a grid (specifically a height-field).  The default size is 2.0 by 2.0.
--
-- @param trigger Trigger channel.
-- @param adjust Adjusts specific points in the height field.
-- @param imap Initial height map (and size).
-- @param out Points generated.
-- @param ctrl Control channel.
--
PROC heightfieldpoint.generator (CHAN INT trigger?, CHAN MOBILE []G3D.POINT2.3R adjust?, VAL [][]REAL32 imap, CHAN MOBILE [][]G3D.POINT3 out!, CHAN G3D.GEN.CONTROL ctrl?)
  MOBILE [][]G3D.POINT3 cpnts, opnts:
  INT width, height:
  
  PROC reset () --{{{
    REAL32 zstep, xstep:
    SEQ
      height := SIZE imap
      width := SIZE imap[0]

      opnts := MOBILE [height][width]G3D.POINT3
      zstep := 2.0 / (REAL32 ROUND (height - 1))
      xstep := 2.0 / (REAL32 ROUND (width - 1))

      SEQ z = 0 FOR height
        REAL32 tz:
        SEQ
          tz := (-1.0) + ((REAL32 ROUND z) * zstep)
          SEQ x = 0 FOR width
            REAL32 tx:
            SEQ
              tx := (-1.0) + ((REAL32 ROUND x) * xstep)

              opnts[z][x] := [tx, imap[z][x], tz]
  :
  --}}}

  SEQ
    --{{{  initialise
    reset ()
    cpnts := CLONE opnts

    --}}}

    INITIAL BOOL running IS TRUE:
    WHILE running
      SEQ
        PRI ALT
          ctrl ? CASE
            --{{{  reset: initialise back to default state
            reset
              SEQ
                reset ()
                cpnts := CLONE opnts
            --}}}
            --{{{  add.scale: add scale to current points
            [3]REAL32 scale:
            add.scale; scale
              SEQ z = 0 FOR height
                SEQ x = 0 FOR width
                  SEQ
                    cpnts[z][x][x] := cpnts[z][x][x] * scale[0]
                    cpnts[z][x][y] := cpnts[z][x][y] * scale[1]
                    cpnts[z][x][z] := cpnts[z][x][z] * scale[2]
            --}}}
            --{{{  set.scale: set scale based on old points
            [3]REAL32 scale:
            set.scale; scale
              SEQ z = 0 FOR height
                SEQ x = 0 FOR width
                  SEQ
                    cpnts[z][x][x] := opnts[z][x][x] * scale[0]
                    cpnts[z][x][y] := opnts[z][x][y] * scale[1]
                    cpnts[z][x][z] := opnts[z][x][z] * scale[2]
            --}}}
            --{{{  add.trans: add translation to current points
            [3]REAL32 trans:
            add.trans; trans
              SEQ z = 0 FOR height
                SEQ x = 0 FOR width
                  SEQ
                    cpnts[z][x][x] := cpnts[z][x][x] + trans[0]
                    cpnts[z][x][y] := cpnts[z][x][y] + trans[1]
                    cpnts[z][x][z] := cpnts[z][x][z] + trans[2]
            --}}}
            --{{{  set.trans: set translation based on original points
            [3]REAL32 trans:
            set.trans; trans
              SEQ z = 0 FOR height
                SEQ x = 0 FOR width
                  SEQ
                    cpnts[z][x][x] := opnts[z][x][x] + trans[0]
                    cpnts[z][x][y] := opnts[z][x][y] + trans[1]
                    cpnts[z][x][z] := opnts[z][x][z] + trans[2]
            --}}}
          MOBILE []G3D.POINT2.3R adj:
          adjust ? adj
            --{{{  adjust particular point(s) in the height field
            SEQ i = 0 FOR SIZE adj
              IF
                (adj[i][x] < 0) OR (adj[i][x] >= width)
                  SKIP
                (adj[i][y] < 0) OR (adj[i][y] >= height)
                  SKIP
                TRUE
                  SEQ
                    opnts[adj[i][y]][adj[i][x]][y] := adj[i][z]
            --}}}
          INT any:
          trigger ? any
            --{{{  generate points for output
            out ! CLONE cpnts
            --}}}
:
--}}}

