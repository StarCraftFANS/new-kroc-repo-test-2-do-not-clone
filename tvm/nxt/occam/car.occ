#INCLUDE "nxt.inc"

PROC do.delay (VAL INT us)

  TIMER tim:
  INT t:
  SEQ
    tim ? t
    t := t PLUS us
    tim ? AFTER t
:

--{{{  FUNCTION same.string
--* Compare two strings for equality.
-- @param a, b Strings to compare
-- @return [@code TRUE] if the strings are the same, [@code FALSE] otherwise
BOOL FUNCTION same.string (VAL []BYTE a, b)
  BOOL r:
  VALOF
    IF
      (SIZE a) <> (SIZE b)
        r := FALSE
      IF i = 0 FOR SIZE a
        a[i] <> b[i]
          r := FALSE
      TRUE
        r := TRUE
    RESULT r
:
--}}}


PROC main ()
  INT handle:
  INT port:
  VAL [8]BYTE read IS "        ":
  TIMER tim:
  INT t:
  SEQ
    nx.display.clear ()
    --Set up Bluetooth
    nx.bt.init()
    nx.bt.set.discoverable(TRUE)
    nx.bt.open.port(port)
    --Wait for an incoming connection
    nx.display.string("Waiting for connection")
    INITIAL INT pending IS 0:
    WHILE pending < 1
      nx.bt.connection.pending(pending) 
    nx.bt.accept.connection(TRUE)
    nx.display.string("Accepted Connection")
    nx.bt.connection.established(handle)
    WHILE handle < 0
      SEQ
        tim ? t
        t := t PLUS 1000
        tim ? AFTER t
        nx.bt.connection.established(handle)
    IF 
      handle >= 0
        SEQ
          nx.display.string("Connection Established")
      TRUE  
        SEQ
          nx.display.string("No connection")
          STOP
    nx.bt.stream.open(handle)
    WHILE TRUE
      SEQ
        do.delay(50)
        PAR
          nx.bt.stream.read(read, 1)
        nx.display.clear()
        nx.display.string(read)
        IF
          same.string(read, "l       ") = TRUE
            PAR
              nx.display.string("LEFT")
              nx.motors.rotate(0, 100)
              nx.motors.rotate(1,-100)
          same.string(read, "r       ") = TRUE
            PAR
              nx.display.string("RIGHT")
              nx.motors.rotate(0,-100)
              nx.motors.rotate(1, 100)
          same.string(read, "f       ") = TRUE
            PAR
              nx.display.string("FORWARD")
              nx.motors.rotate(0, 100)
              nx.motors.rotate(1, 100)
          same.string(read, "b       ") = TRUE
            PAR
              nx.display.string("BACKWARD")
              nx.motors.rotate(0, -100)
              nx.motors.rotate(1, -100)
          same.string(read, "s       ") = TRUE
            PAR
              nx.display.string("STOP")
              nx.motors.stop(0, TRUE)
              nx.motors.stop(1, TRUE)
          TRUE
            SKIP          
:


