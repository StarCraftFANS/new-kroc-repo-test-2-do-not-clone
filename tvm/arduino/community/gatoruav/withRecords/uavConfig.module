--* This is a package of the uavs pitch, roll, and yaw(heading) data
DATA TYPE ATTITUDE
  RECORD
    INT pitch: --* The pitch 
    INT roll: --* The roll
    INT heading: --* The yaw
:

--* This is a package of the uavs pitch and roll data
DATA TYPE IMU.DATA
  RECORD
    INT pitch: --* The pitch
    INT roll: --* The roll
:

--* Number of readings that av averages
VAL INT NUM.READINGS.TO.AVERAGE IS (10):

--* Increases the amount of pitch (elevator) correction that occurs
VAL INT PITCH.SERVO.MULTIPLIER IS (2):

--* Increases the amount of roll (aileron) correction that occurs
VAL INT ROLL.SERVO.MULTIPLIER IS (4):

--* The Gain for our complementary filtering of roll.  The higher the value the more biased the filter is towards the gyro values
VAL INT ROLL.FILTER.GAIN IS (92):

--* The Gain for our complementary filtering of pitch.  The higher the value the more biased the filter is towards the gyro values
VAL INT PITCH.FILTER.GAIN IS (85):

--* The starting positions of the Aileron surfaces
VAL INT AILERON.START IS (90):

--* The starting positions of the Elevator surfaces
VAL INT ELEVATOR.START IS (90):

--* The offsets for the pitch angle
VAL INT OFFSET.PITCH IS (0):

--* The offsets for the roll angle
VAL INT OFFSET.ROLL IS (0):

--* The buffer size that the gps is read into
VAL INT BUFFER.SIZE IS (80):

--* The serial port the the gps is transmiting to
VAL INT GPS.PORT IS (RX1):

--* The PWM pin number that the elevator servo is hooked up to
VAL INT ELEVATOR.SERVO.PIN IS (45):

--* The PWM pin number that the aileron servo is hooked up to
VAL INT AILERON.SERVO.PIN IS (44):


VAL []INT powers IS [10000, 1000, 100, 10, 1]:
PROC serialWriteDecInt (VAL INT n)
  INITIAL INT index IS 0:
  INITIAL INT number IS n:
  INITIAL BOOL neg IS FALSE:
  SEQ
    IF
      n < 0
        SEQ
          neg := TRUE
          number := n * (- 1)
      TRUE
        SKIP
    IF 
      neg 
        serial.write.string(TX0, "-")
      TRUE 
        SKIP
    WHILE (index < 5)
      INT digit:
      SEQ
        digit := number / powers[index]
        number := number REM powers[index]
        digit := digit + (INT '0')
        serial.write.string(TX0,[BYTE digit])
        index := index + 1
    
:
