#INCLUDE "uavsensors.module"
#INCLUDE "servo.module"
#INCLUDE "control.module"
#INCLUDE "gps.module"
--#INCLUDE "control.module"
PROC display(CHAN INT theta?)
  INT angle:
  WHILE TRUE
    SEQ
      theta ? angle
      serialWriteDecInt(angle)
      serial.write.string(TX0, "*n")
:
VAL INT NUM.READINGS.TO.AVERAGE IS 10:
PROC av (CHAN INT input?, output!)
  [NUM.READINGS.TO.AVERAGE]INT readings:
  INT  sum:
  INITIAL INT ndx IS 0:
  SEQ
    -- Preload array
    SEQ i = 0 FOR (SIZE readings)
      input ? readings[i]      
    WHILE TRUE
      SEQ
        -- Read in a new value
        input ? readings[ndx]
        -- Sum up the current array of readings
        sum := 0
        SEQ i = 0 FOR (SIZE readings)
          sum := sum + readings[i]
        output ! (sum / (SIZE readings))
        ndx := (ndx + 1) REM (SIZE readings)
:

PROC brain (CHAN IMU.DATA orientation?, turning!, level!) -- This proc chooses whether to be pushing the data from the IMU filter to the turn or level flight procs based on a timer.
  TIMER time:
  INT t:
  IMU.DATA pos:
  WHILE  TRUE
    SEQ
      time ? t
      IF
        t < 0
          t := t * (-1)
        TRUE
          SKIP
      IF 
        ((t < 12000) AND (t > 10000)) OR  (t > 31000) OR (t < 1000) 
          PAR
            SEQ
              orientation ? pos
              turning ! pos      

        TRUE
          PAR
            SEQ
              orientation ? pos
              level ! pos
:
PROC main ()
  CHAN SERVO s, s2, s3, s4:
  CHAN INT roll, pitch, filtered.x, filtered.y:
  CHAN IMU.DATA orientation, level, turning:
  SEQ
    digital.mode (45, OUTPUT)
    digital.mode (44, OUTPUT)

    PAR
      --digital.mode(32, OUTPUT) -- Solid navigation lights
      --digital.write(32, 1)
      --digital.mode(30, OUTPUT)
      --digital.write(30, 1)
      
      --SEQ           -- Blinks White strobe LED's in a nice pattern 
        --delay (500)
        --blink (31, 1000)
      --SEQ
        --blink (33, 1000)
      --SEQ
        --delay (250)
        --blink (40, 1000)
      
      servo (45, s)
      servo (44, s2)
      servo (45, s3)
      servo (44, s4)
      
      SEQ
        servo.setup(s4)
        servo.setup(s4)
        servo.setup(s4)
        servo.setup(s4)
        delay (2000)

        PAR
          level.flight (level?, s, s2)
          turn (turning?, 6, s3, s4)
          brain (orientation?, level!, turning!)

      angles(A4, A5, A0, A1, pitch!, roll!)
      packer(filtered.x?, filtered.y?, orientation!)
      av(pitch?, filtered.x!)
      av(roll?, filtered.y!)
:
