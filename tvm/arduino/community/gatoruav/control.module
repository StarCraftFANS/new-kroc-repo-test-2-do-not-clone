#IF NOT (DEFINED (CONTROL.MODULE))
#DEFINE CONTROL.MODULE

PROC turn (CHAN INT x?, y?, VAL INT bank.angle, CHAN SERVO s, s2)
  INT servo.pos.roll, servo.pos.pitch, pitch, roll:
  WHILE TRUE
    SEQ
      x ? pitch
      y ? roll
      servo.pos.pitch := (pitch * (-1)) + 120
      s ! pos ; servo.pos.pitch
      servo.pos.roll := (roll * (-1)) + (bank.angle + 90)
      s2 ! pos ; servo.pos.roll
     
    
:    
#IF FALSE    
VAL BOOL LEFT IS TRUE:
VAL BOOL RIGHT IS FALSE: 
PROC turn.to.heading (CHAN INT theta.x?, theta.y?, heading?, CHAN SIGNAL sig, CHAN SERVO s, s2, VAL BOOL turn.dir, VAL INT new.heading)
  INT pitch, roll, curr.dir:
  
  SEQ
    
    theta.x ? pitch
    theta.y ? roll
    heading ? curr.dir
    
    
    IF 
      curr.dir = new.heading  -- If we are flying at the same heading as the new heading we want, then just keep flying
        SKIP
      turn.dir = LEFT
        WHILE (curr.dir > (5 + new.heading)) AND (curr.dir < (5 + new.heading))  -- If we want to specify a left turn, then we will turn to the left until we are within 5 degrees of our intended new heading.
          SEQ
            turn (pitch, roll, 35, s, s2)
      turn.dir = RIGHT
        WHILE (curr.dir > (5 + new.heading)) AND (curr.dir < (5 + new.heading)) -- If we want to specify a right turn, then we will turn to the right until we are within 5 degrees of our intended new heading.
          SEQ
            turn (pitch, roll, (-35), s, s2)
      TRUE
        SKIP
:
#ENDIF
PROC level.flight (CHAN INT theta.x?, theta.y?, CHAN SERVO s, s2) -- This PROC acts as a feedback mechanism keeping the airplane in level flight.  As the attitude of the airplane changes, the servos are moved to positions to return the plane to level flight.
  INT pitch, roll, servo.pos.pitch, servo.pos.roll:
  SEQ
    s ! pos ; 90
    WHILE TRUE
      SEQ
        theta.x ? pitch
        theta.y ? roll
        
        servo.pos.pitch := (pitch * (-2)) + 91
        s ! pos ; servo.pos.pitch
        
        servo.pos.roll := (roll * (-4)) + 90
        s2 ! pos ; servo.pos.roll
        
      
:  
PROC servo.setup(CHAN SERVO s) --Wrapped the initialization of the servo

  SEQ
    s ! min ; 650
    s ! max ; 2350
    s ! div ; 180
    s ! pos ; 0
    s ! start
: 
#ENDIF
