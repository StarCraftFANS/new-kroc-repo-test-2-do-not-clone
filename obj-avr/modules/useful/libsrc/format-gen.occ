--
--	Formatted output library (automatically generated by make-format.py)
--	Copyright (C) 2008 Adam Sampson <ats@offog.org>
--
--	This library is free software; you can redistribute it and/or
--	modify it under the terms of the GNU Lesser General Public
--	License as published by the Free Software Foundation, either
--	version 2 of the License, or (at your option) any later version.
--
--	This library is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--	Lesser General Public License for more details.
--
--	You should have received a copy of the GNU Lesser General Public
--	License along with this library.  If not, see
--	<http://www.gnu.org/licenses/>.
--

--** @module useful

#USE "format"

PROC print.i (VAL INT i0, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
:
PROC prints.i (VAL INT i0, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
:
PROC format.i (VAL INT i0, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
:
PROC trace.i (VAL INT i0)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
:
PROC print.is (VAL INT i0, VAL []BYTE s1, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
:
PROC prints.is (VAL INT i0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
:
PROC format.is (VAL INT i0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
:
PROC trace.is (VAL INT i0, VAL []BYTE s1)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
:
PROC print.isi (VAL INT i0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
:
PROC prints.isi (VAL INT i0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
:
PROC format.isi (VAL INT i0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
:
PROC trace.isi (VAL INT i0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
:
PROC print.isis (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
:
PROC prints.isis (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
:
PROC format.isis (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.isis (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
:
PROC print.isisi (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.isisi (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.isisi (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.isisi (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.isiss (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.isiss (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.isiss (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.isiss (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.isisr (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isisr (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isisr (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isisr (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isisb (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isisb (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isisb (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isisb (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isisn (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.isisn (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.isisn (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isisn (VAL INT i0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.isin (VAL INT i0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, "*n")
:
PROC prints.isin (VAL INT i0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, "*n")
:
PROC format.isin (VAL INT i0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isin (VAL INT i0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace ("*n")
:
PROC print.iss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
:
PROC prints.iss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
:
PROC format.iss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.iss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
:
PROC print.issi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.issi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.issi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.issi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.issis (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.issis (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.issis (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.issis (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.issin (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.issin (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.issin (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.issin (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.isss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.isss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.isss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.isss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
:
PROC print.isssi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.isssi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.isssi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.isssi (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.issss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.issss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.issss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.issss (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.isssr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isssr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isssr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isssr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isssb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isssb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isssb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isssb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isssn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.isssn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.isssn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isssn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.issr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.issr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.issr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.issr (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.issrs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.issrs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.issrs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.issrs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.issrn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.issrn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.issrn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.issrn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.issb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.issb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.issb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.issb (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.issbs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.issbs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.issbs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.issbs (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.issbn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.issbn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.issbn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.issbn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.issn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.issn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.issn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.issn (VAL INT i0, VAL []BYTE s1, VAL []BYTE s2)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace (s2)
    format.trace ("*n")
:
PROC print.isr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.isr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.isr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.isr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.isrs (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.isrs (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.isrs (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.isrs (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.isrsi (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.isrsi (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.isrsi (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.isrsi (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.isrss (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.isrss (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.isrss (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.isrss (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.isrsr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isrsr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isrsr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isrsr (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isrsb (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isrsb (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isrsb (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isrsb (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isrsn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.isrsn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.isrsn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isrsn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.isrn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.isrn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.isrn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isrn (VAL INT i0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf0:
  INT start0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.isb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.isb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.isb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.isb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.isbs (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.isbs (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.isbs (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.isbs (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.isbsi (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.isbsi (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.isbsi (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.isbsi (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.isbss (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.isbss (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.isbss (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.isbss (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.isbsr (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isbsr (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isbsr (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isbsr (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isbsb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.isbsb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.isbsb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.isbsb (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.isbsn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.isbsn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.isbsn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isbsn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.isbn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.isbn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.isbn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isbn (VAL INT i0, VAL []BYTE s1, VAL BOOL b2)
  [20]BYTE buf0:
  INT start0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.int (buf0, start0, i0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.isn (VAL INT i0, VAL []BYTE s1, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, s1)
    format.print (out!, "*n")
:
PROC prints.isn (VAL INT i0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, s1)
        format.print (out!, "*n")
:
PROC format.isn (VAL INT i0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + (SIZE s1)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.isn (VAL INT i0, VAL []BYTE s1)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace (s1)
    format.trace ("*n")
:
PROC print.in (VAL INT i0, CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.print (out!, [buf0 FROM start0])
    format.print (out!, "*n")
:
PROC prints.in (VAL INT i0, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FROM start0])
        format.print (out!, "*n")
:
PROC format.in (VAL INT i0, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT start0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.int (buf0, start0, i0)
    len := len + ((SIZE buf0) - start0)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR ((SIZE buf0) - start0)] := [buf0 FROM start0]
    pos := pos + ((SIZE buf0) - start0)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.in (VAL INT i0)
  [20]BYTE buf0:
  INT start0:
  SEQ
    format.int (buf0, start0, i0)
    format.trace ([buf0 FROM start0])
    format.trace ("*n")
:
PROC print.s (VAL []BYTE s0, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
:
PROC prints.s (VAL []BYTE s0, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
:
PROC format.s (VAL []BYTE s0, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
:
PROC trace.s (VAL []BYTE s0)
  SEQ
    format.trace (s0)
:
PROC print.si (VAL []BYTE s0, VAL INT i1, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
:
PROC prints.si (VAL []BYTE s0, VAL INT i1, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
:
PROC format.si (VAL []BYTE s0, VAL INT i1, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
:
PROC trace.si (VAL []BYTE s0, VAL INT i1)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
:
PROC print.sis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
:
PROC prints.sis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
:
PROC format.sis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.sis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
:
PROC print.sisi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.sisi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.sisi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.sisi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.sisis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.sisis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.sisis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sisis (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.sisin (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.sisin (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.sisin (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sisin (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.siss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.siss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.siss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.siss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
:
PROC print.sissi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.sissi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.sissi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.sissi (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf1, start1, i1)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.sisss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.sisss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.sisss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sisss (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.sissr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.sissr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.sissr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.sissr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.sissb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.sissb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.sissb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.sissb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.sissn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.sissn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.sissn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sissn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.sisr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sisr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sisr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sisr (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sisrs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sisrs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sisrs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sisrs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sisrn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sisrn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sisrn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sisrn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf1:
  INT start1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sisb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sisb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sisb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sisb (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sisbs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sisbs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sisbs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sisbs (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sisbn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sisbn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sisbn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sisbn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf1:
  INT start1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.int (buf1, start1, i1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sisn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.sisn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.sisn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sisn (VAL []BYTE s0, VAL INT i1, VAL []BYTE s2)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace (s2)
    format.trace ("*n")
:
PROC print.sin (VAL []BYTE s0, VAL INT i1, CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.print (out!, s0)
    format.print (out!, [buf1 FROM start1])
    format.print (out!, "*n")
:
PROC prints.sin (VAL []BYTE s0, VAL INT i1, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FROM start1])
        format.print (out!, "*n")
:
PROC format.sin (VAL []BYTE s0, VAL INT i1, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT start1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.int (buf1, start1, i1)
    len := len + ((SIZE buf1) - start1)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR ((SIZE buf1) - start1)] := [buf1 FROM start1]
    pos := pos + ((SIZE buf1) - start1)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sin (VAL []BYTE s0, VAL INT i1)
  [20]BYTE buf1:
  INT start1:
  SEQ
    format.int (buf1, start1, i1)
    format.trace (s0)
    format.trace ([buf1 FROM start1])
    format.trace ("*n")
:
PROC print.ss (VAL []BYTE s0, VAL []BYTE s1, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
:
PROC prints.ss (VAL []BYTE s0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
:
PROC format.ss (VAL []BYTE s0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
:
PROC trace.ss (VAL []BYTE s0, VAL []BYTE s1)
  SEQ
    format.trace (s0)
    format.trace (s1)
:
PROC print.ssi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
:
PROC prints.ssi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
:
PROC format.ssi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
:
PROC trace.ssi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
:
PROC print.ssis (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
:
PROC prints.ssis (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
:
PROC format.ssis (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.ssis (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
:
PROC print.ssisi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.ssisi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.ssisi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.ssisi (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.ssiss (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.ssiss (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.ssiss (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.ssiss (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.ssisr (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssisr (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssisr (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssisr (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssisb (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssisb (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssisb (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssisb (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssisn (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.ssisn (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.ssisn (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssisn (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.ssin (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, "*n")
:
PROC prints.ssin (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, "*n")
:
PROC format.ssin (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssin (VAL []BYTE s0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.int (buf2, start2, i2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace ("*n")
:
PROC print.sss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
:
PROC prints.sss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
:
PROC format.sss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.sss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
:
PROC print.sssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.sssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.sssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.sssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.sssis (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.sssis (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.sssis (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sssis (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.sssin (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.sssin (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.sssin (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sssin (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.ssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.ssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.ssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.ssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
:
PROC print.ssssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.ssssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.ssssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.ssssi (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.sssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.sssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.sssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sssss (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.ssssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.ssssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.ssssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.sssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sssr (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sssrs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sssrs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sssrs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sssrs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sssrn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sssrn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sssrn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sssrn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sssb (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sssbs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sssbs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sssbs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sssbs (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sssbn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sssbn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sssbn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sssbn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.sssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.sssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sssn (VAL []BYTE s0, VAL []BYTE s1, VAL []BYTE s2)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace (s2)
    format.trace ("*n")
:
PROC print.ssr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.ssr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.ssr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.ssr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.ssrs (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.ssrs (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.ssrs (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.ssrs (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.ssrsi (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.ssrsi (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.ssrsi (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.ssrsi (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.ssrss (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.ssrss (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.ssrss (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.ssrss (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.ssrsr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssrsr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssrsr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssrsr (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssrsb (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssrsb (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssrsb (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssrsb (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssrsn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.ssrsn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.ssrsn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssrsn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.ssrn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.ssrn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.ssrn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssrn (VAL []BYTE s0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf2, size2, r2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.ssb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.ssb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.ssb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.ssb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.ssbs (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.ssbs (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.ssbs (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.ssbs (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.ssbsi (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.ssbsi (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.ssbsi (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.ssbsi (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.ssbss (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.ssbss (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.ssbss (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.ssbss (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.ssbsr (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssbsr (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssbsr (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssbsr (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssbsb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.ssbsb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.ssbsb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.ssbsb (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.ssbsn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.ssbsn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.ssbsn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssbsn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.ssbn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.ssbn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.ssbn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssbn (VAL []BYTE s0, VAL []BYTE s1, VAL BOOL b2)
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf2, size2, b2)
    format.trace (s0)
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.ssn (VAL []BYTE s0, VAL []BYTE s1, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, s1)
    format.print (out!, "*n")
:
PROC prints.ssn (VAL []BYTE s0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, s1)
        format.print (out!, "*n")
:
PROC format.ssn (VAL []BYTE s0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + (SIZE s1)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.ssn (VAL []BYTE s0, VAL []BYTE s1)
  SEQ
    format.trace (s0)
    format.trace (s1)
    format.trace ("*n")
:
PROC print.sr (VAL []BYTE s0, VAL REAL32 r1, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
:
PROC prints.sr (VAL []BYTE s0, VAL REAL32 r1, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
:
PROC format.sr (VAL []BYTE s0, VAL REAL32 r1, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
:
PROC trace.sr (VAL []BYTE s0, VAL REAL32 r1)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
:
PROC print.srs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
:
PROC prints.srs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
:
PROC format.srs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.srs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
:
PROC print.srsi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.srsi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.srsi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.srsi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.srsis (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.srsis (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.srsis (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.srsis (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.srsin (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.srsin (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.srsin (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srsin (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.srss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.srss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.srss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.srss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
:
PROC print.srssi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.srssi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.srssi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.srssi (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.srsss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.srsss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.srsss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.srsss (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.srssr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.srssr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.srssr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.srssr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.srssb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.srssb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.srssb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.srssb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.srssn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.srssn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.srssn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srssn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.srsr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.srsr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.srsr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.srsr (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.srsrs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.srsrs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.srsrs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.srsrs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.srsrn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.srsrn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.srsrn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srsrn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.srsb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.srsb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.srsb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.srsb (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.srsbs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.srsbs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.srsbs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.srsbs (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.srsbn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.srsbn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.srsbn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srsbn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf1, size1, r1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.srsn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.srsn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.srsn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srsn (VAL []BYTE s0, VAL REAL32 r1, VAL []BYTE s2)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ("*n")
:
PROC print.srn (VAL []BYTE s0, VAL REAL32 r1, CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, "*n")
:
PROC prints.srn (VAL []BYTE s0, VAL REAL32 r1, SHARED CHAN BYTE out!)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, "*n")
:
PROC format.srn (VAL []BYTE s0, VAL REAL32 r1, RESULT MOBILE []BYTE string)
  [20]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.real32 (buf1, size1, r1)
    len := len + size1
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.srn (VAL []BYTE s0, VAL REAL32 r1)
  [20]BYTE buf1:
  INT size1:
  SEQ
    format.real32 (buf1, size1, r1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace ("*n")
:
PROC print.sb (VAL []BYTE s0, VAL BOOL b1, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
:
PROC prints.sb (VAL []BYTE s0, VAL BOOL b1, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
:
PROC format.sb (VAL []BYTE s0, VAL BOOL b1, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
:
PROC trace.sb (VAL []BYTE s0, VAL BOOL b1)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
:
PROC print.sbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
:
PROC prints.sbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
:
PROC format.sbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.sbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
:
PROC print.sbsi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.sbsi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.sbsi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.sbsi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.sbsis (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.sbsis (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.sbsis (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sbsis (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.sbsin (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.sbsin (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.sbsin (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbsin (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL INT i3)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf3, start3, i3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.sbss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.sbss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.sbss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.sbss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
:
PROC print.sbssi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf4, start4, i4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.sbssi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.sbssi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.sbssi (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf1, size1, b1)
    format.int (buf4, start4, i4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.sbsss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.sbsss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.sbsss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sbsss (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.sbssr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf4, size4, r4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.sbssr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.sbssr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.sbssr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf4, size4, r4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.sbssb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf4, size4, b4)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.sbssb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.sbssb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.sbssb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf4, size4, b4)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.sbssn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.sbssn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.sbssn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbssn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL []BYTE s3)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.sbsr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sbsr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sbsr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sbsr (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sbsrs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sbsrs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sbsrs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sbsrs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sbsrn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sbsrn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sbsrn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbsrn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL REAL32 r3)
  [5]BYTE buf1:
  INT size1:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.real32 (buf3, size3, r3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sbsb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.sbsb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.sbsb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.sbsb (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.sbsbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.sbsbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.sbsbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.sbsbs (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.sbsbn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.sbsbn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.sbsbn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbsbn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf1:
  INT size1:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf1, size1, b1)
    format.bool (buf3, size3, b3)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.sbsn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.sbsn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.sbsn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbsn (VAL []BYTE s0, VAL BOOL b1, VAL []BYTE s2)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace (s2)
    format.trace ("*n")
:
PROC print.sbn (VAL []BYTE s0, VAL BOOL b1, CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.print (out!, s0)
    format.print (out!, [buf1 FOR size1])
    format.print (out!, "*n")
:
PROC prints.sbn (VAL []BYTE s0, VAL BOOL b1, SHARED CHAN BYTE out!)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, [buf1 FOR size1])
        format.print (out!, "*n")
:
PROC format.sbn (VAL []BYTE s0, VAL BOOL b1, RESULT MOBILE []BYTE string)
  [5]BYTE buf1:
  INT size1:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    format.bool (buf1, size1, b1)
    len := len + size1
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR size1] := [buf1 FOR size1]
    pos := pos + size1
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sbn (VAL []BYTE s0, VAL BOOL b1)
  [5]BYTE buf1:
  INT size1:
  SEQ
    format.bool (buf1, size1, b1)
    format.trace (s0)
    format.trace ([buf1 FOR size1])
    format.trace ("*n")
:
PROC print.sn (VAL []BYTE s0, CHAN BYTE out!)
  SEQ
    format.print (out!, s0)
    format.print (out!, "*n")
:
PROC prints.sn (VAL []BYTE s0, SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, s0)
        format.print (out!, "*n")
:
PROC format.sn (VAL []BYTE s0, RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + (SIZE s0)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR (SIZE s0)] := s0
    pos := pos + (SIZE s0)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.sn (VAL []BYTE s0)
  SEQ
    format.trace (s0)
    format.trace ("*n")
:
PROC print.r (VAL REAL32 r0, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
:
PROC prints.r (VAL REAL32 r0, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
:
PROC format.r (VAL REAL32 r0, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
:
PROC trace.r (VAL REAL32 r0)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
:
PROC print.rs (VAL REAL32 r0, VAL []BYTE s1, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
:
PROC prints.rs (VAL REAL32 r0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
:
PROC format.rs (VAL REAL32 r0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
:
PROC trace.rs (VAL REAL32 r0, VAL []BYTE s1)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
:
PROC print.rsi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
:
PROC prints.rsi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
:
PROC format.rsi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
:
PROC trace.rsi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
:
PROC print.rsis (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
:
PROC prints.rsis (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
:
PROC format.rsis (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.rsis (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
:
PROC print.rsisi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.rsisi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.rsisi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.rsisi (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.rsiss (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.rsiss (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.rsiss (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rsiss (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.rsisr (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsisr (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsisr (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsisr (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsisb (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsisb (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsisb (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsisb (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsisn (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.rsisn (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.rsisn (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsisn (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.rsin (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, "*n")
:
PROC prints.rsin (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, "*n")
:
PROC format.rsin (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsin (VAL REAL32 r0, VAL []BYTE s1, VAL INT i2)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace ("*n")
:
PROC print.rss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
:
PROC prints.rss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
:
PROC format.rss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.rss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
:
PROC print.rssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.rssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.rssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.rssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.rssis (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.rssis (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.rssis (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rssis (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.rssin (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.rssin (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.rssin (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rssin (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.rsss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.rsss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.rsss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.rsss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
:
PROC print.rsssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.rsssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.rsssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.rsssi (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.rssss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.rssss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.rssss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rssss (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.rsssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.rsssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.rsssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.rssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.rssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.rssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.rssr (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.rssrs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.rssrs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.rssrs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rssrs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.rssrn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.rssrn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.rssrn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rssrn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.rssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.rssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.rssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.rssb (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.rssbs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.rssbs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.rssbs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rssbs (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.rssbn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.rssbn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.rssbn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rssbn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.rssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.rssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.rssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rssn (VAL REAL32 r0, VAL []BYTE s1, VAL []BYTE s2)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ("*n")
:
PROC print.rsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.rsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.rsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.rsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.rsrs (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.rsrs (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.rsrs (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.rsrs (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.rsrsi (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.rsrsi (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.rsrsi (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.rsrsi (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.rsrss (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.rsrss (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.rsrss (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rsrss (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.rsrsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsrsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsrsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsrsr (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsrsb (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsrsb (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsrsb (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsrsb (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsrsn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.rsrsn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.rsrsn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsrsn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.rsrn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.rsrn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.rsrn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsrn (VAL REAL32 r0, VAL []BYTE s1, VAL REAL32 r2)
  [20]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.rsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.rsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.rsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.rsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.rsbs (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.rsbs (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.rsbs (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.rsbs (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.rsbsi (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.rsbsi (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.rsbsi (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.rsbsi (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.rsbss (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.rsbss (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.rsbss (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.rsbss (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.rsbsr (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsbsr (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsbsr (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsbsr (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsbsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.rsbsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.rsbsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.rsbsb (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.rsbsn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.rsbsn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.rsbsn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsbsn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.rsbn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.rsbn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.rsbn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsbn (VAL REAL32 r0, VAL []BYTE s1, VAL BOOL b2)
  [20]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.real32 (buf0, size0, r0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.rsn (VAL REAL32 r0, VAL []BYTE s1, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, "*n")
:
PROC prints.rsn (VAL REAL32 r0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, "*n")
:
PROC format.rsn (VAL REAL32 r0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rsn (VAL REAL32 r0, VAL []BYTE s1)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ("*n")
:
PROC print.rn (VAL REAL32 r0, CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, "*n")
:
PROC prints.rn (VAL REAL32 r0, SHARED CHAN BYTE out!)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, "*n")
:
PROC format.rn (VAL REAL32 r0, RESULT MOBILE []BYTE string)
  [20]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.real32 (buf0, size0, r0)
    len := len + size0
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.rn (VAL REAL32 r0)
  [20]BYTE buf0:
  INT size0:
  SEQ
    format.real32 (buf0, size0, r0)
    format.trace ([buf0 FOR size0])
    format.trace ("*n")
:
PROC print.b (VAL BOOL b0, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
:
PROC prints.b (VAL BOOL b0, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
:
PROC format.b (VAL BOOL b0, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
:
PROC trace.b (VAL BOOL b0)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
:
PROC print.bs (VAL BOOL b0, VAL []BYTE s1, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
:
PROC prints.bs (VAL BOOL b0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
:
PROC format.bs (VAL BOOL b0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
:
PROC trace.bs (VAL BOOL b0, VAL []BYTE s1)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
:
PROC print.bsi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
:
PROC prints.bsi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
:
PROC format.bsi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
:
PROC trace.bsi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
:
PROC print.bsis (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
:
PROC prints.bsis (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
:
PROC format.bsis (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.bsis (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
:
PROC print.bsisi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.bsisi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.bsisi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.bsisi (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.bsiss (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.bsiss (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.bsiss (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bsiss (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.bsisr (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsisr (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsisr (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsisr (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsisb (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsisb (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsisb (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsisb (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsisn (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.bsisn (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.bsisn (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsisn (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.bsin (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FROM start2])
    format.print (out!, "*n")
:
PROC prints.bsin (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FROM start2])
        format.print (out!, "*n")
:
PROC format.bsin (VAL BOOL b0, VAL []BYTE s1, VAL INT i2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.int (buf2, start2, i2)
    len := len + ((SIZE buf2) - start2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR ((SIZE buf2) - start2)] := [buf2 FROM start2]
    pos := pos + ((SIZE buf2) - start2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsin (VAL BOOL b0, VAL []BYTE s1, VAL INT i2)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT start2:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf2, start2, i2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FROM start2])
    format.trace ("*n")
:
PROC print.bss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
:
PROC prints.bss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
:
PROC format.bss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
:
PROC trace.bss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
:
PROC print.bssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
:
PROC prints.bssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
:
PROC format.bssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
:
PROC trace.bssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
:
PROC print.bssis (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, s4)
:
PROC prints.bssis (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, s4)
:
PROC format.bssis (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bssis (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace (s4)
:
PROC print.bssin (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FROM start3])
    format.print (out!, "*n")
:
PROC prints.bssin (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FROM start3])
        format.print (out!, "*n")
:
PROC format.bssin (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.int (buf3, start3, i3)
    len := len + ((SIZE buf3) - start3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR ((SIZE buf3) - start3)] := [buf3 FROM start3]
    pos := pos + ((SIZE buf3) - start3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bssin (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL INT i3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT start3:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf3, start3, i3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FROM start3])
    format.trace ("*n")
:
PROC print.bsss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
:
PROC prints.bsss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
:
PROC format.bsss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.bsss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
:
PROC print.bsssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.bsssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.bsssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.bsssi (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.bssss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.bssss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.bssss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bssss (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace (s4)
:
PROC print.bsssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.bsssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.bsssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace (s3)
    format.trace ("*n")
:
PROC print.bssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.bssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.bssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.bssr (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.bssrs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.bssrs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.bssrs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bssrs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.bssrn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.bssrn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.bssrn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.real32 (buf3, size3, r3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bssrn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL REAL32 r3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf3, size3, r3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.bssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
:
PROC prints.bssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
:
PROC format.bssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
:
PROC trace.bssb (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
:
PROC print.bssbs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, s4)
:
PROC prints.bssbs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, s4)
:
PROC format.bssbs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bssbs (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace (s4)
:
PROC print.bssbn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, [buf3 FOR size3])
    format.print (out!, "*n")
:
PROC prints.bssbn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, [buf3 FOR size3])
        format.print (out!, "*n")
:
PROC format.bssbn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    format.bool (buf3, size3, b3)
    len := len + size3
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR size3] := [buf3 FOR size3]
    pos := pos + size3
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bssbn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, VAL BOOL b3)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf3:
  INT size3:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf3, size3, b3)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ([buf3 FOR size3])
    format.trace ("*n")
:
PROC print.bssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, s2)
    format.print (out!, "*n")
:
PROC prints.bssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, s2)
        format.print (out!, "*n")
:
PROC format.bssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + (SIZE s2)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR (SIZE s2)] := s2
    pos := pos + (SIZE s2)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bssn (VAL BOOL b0, VAL []BYTE s1, VAL []BYTE s2)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace (s2)
    format.trace ("*n")
:
PROC print.bsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.bsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.bsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.bsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.bsrs (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.bsrs (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.bsrs (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.bsrs (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.bsrsi (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.bsrsi (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.bsrsi (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.bsrsi (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.bsrss (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.bsrss (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.bsrss (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bsrss (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.bsrsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsrsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsrsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsrsr (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsrsb (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsrsb (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsrsb (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsrsb (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsrsn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.bsrsn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.bsrsn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsrsn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.bsrn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.bsrn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.bsrn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.real32 (buf2, size2, r2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsrn (VAL BOOL b0, VAL []BYTE s1, VAL REAL32 r2)
  [5]BYTE buf0:
  INT size0:
  [20]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.real32 (buf2, size2, r2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.bsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
:
PROC prints.bsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
:
PROC format.bsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
:
PROC trace.bsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
:
PROC print.bsbs (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
:
PROC prints.bsbs (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
:
PROC format.bsbs (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
:
PROC trace.bsbs (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
:
PROC print.bsbsi (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FROM start4])
:
PROC prints.bsbsi (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FROM start4])
:
PROC format.bsbsi (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.int (buf4, start4, i4)
    len := len + ((SIZE buf4) - start4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR ((SIZE buf4) - start4)] := [buf4 FROM start4]
    pos := pos + ((SIZE buf4) - start4)
:
PROC trace.bsbsi (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL INT i4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT start4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.int (buf4, start4, i4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FROM start4])
:
PROC print.bsbss (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, s4)
:
PROC prints.bsbss (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, s4)
:
PROC format.bsbss (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + (SIZE s4)
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR (SIZE s4)] := s4
    pos := pos + (SIZE s4)
:
PROC trace.bsbss (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL []BYTE s4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace (s4)
:
PROC print.bsbsr (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsbsr (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsbsr (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.real32 (buf4, size4, r4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsbsr (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL REAL32 r4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [20]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.real32 (buf4, size4, r4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsbsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, [buf4 FOR size4])
:
PROC prints.bsbsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, [buf4 FOR size4])
:
PROC format.bsbsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    format.bool (buf4, size4, b4)
    len := len + size4
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR size4] := [buf4 FOR size4]
    pos := pos + size4
:
PROC trace.bsbsb (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, VAL BOOL b4)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  [5]BYTE buf4:
  INT size4:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.bool (buf4, size4, b4)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ([buf4 FOR size4])
:
PROC print.bsbsn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, s3)
    format.print (out!, "*n")
:
PROC prints.bsbsn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, s3)
        format.print (out!, "*n")
:
PROC format.bsbsn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + (SIZE s3)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR (SIZE s3)] := s3
    pos := pos + (SIZE s3)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsbsn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, VAL []BYTE s3)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace (s3)
    format.trace ("*n")
:
PROC print.bsbn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, [buf2 FOR size2])
    format.print (out!, "*n")
:
PROC prints.bsbn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, [buf2 FOR size2])
        format.print (out!, "*n")
:
PROC format.bsbn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    format.bool (buf2, size2, b2)
    len := len + size2
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR size2] := [buf2 FOR size2]
    pos := pos + size2
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsbn (VAL BOOL b0, VAL []BYTE s1, VAL BOOL b2)
  [5]BYTE buf0:
  INT size0:
  [5]BYTE buf2:
  INT size2:
  SEQ
    format.bool (buf0, size0, b0)
    format.bool (buf2, size2, b2)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ([buf2 FOR size2])
    format.trace ("*n")
:
PROC print.bsn (VAL BOOL b0, VAL []BYTE s1, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, s1)
    format.print (out!, "*n")
:
PROC prints.bsn (VAL BOOL b0, VAL []BYTE s1, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, s1)
        format.print (out!, "*n")
:
PROC format.bsn (VAL BOOL b0, VAL []BYTE s1, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + (SIZE s1)
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR (SIZE s1)] := s1
    pos := pos + (SIZE s1)
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bsn (VAL BOOL b0, VAL []BYTE s1)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace (s1)
    format.trace ("*n")
:
PROC print.bn (VAL BOOL b0, CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.print (out!, [buf0 FOR size0])
    format.print (out!, "*n")
:
PROC prints.bn (VAL BOOL b0, SHARED CHAN BYTE out!)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    CLAIM out!
      SEQ
        format.print (out!, [buf0 FOR size0])
        format.print (out!, "*n")
:
PROC format.bn (VAL BOOL b0, RESULT MOBILE []BYTE string)
  [5]BYTE buf0:
  INT size0:
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    format.bool (buf0, size0, b0)
    len := len + size0
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR size0] := [buf0 FOR size0]
    pos := pos + size0
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.bn (VAL BOOL b0)
  [5]BYTE buf0:
  INT size0:
  SEQ
    format.bool (buf0, size0, b0)
    format.trace ([buf0 FOR size0])
    format.trace ("*n")
:
PROC print.n (CHAN BYTE out!)
  SEQ
    format.print (out!, "*n")
:
PROC prints.n (SHARED CHAN BYTE out!)
  SEQ
    CLAIM out!
      SEQ
        format.print (out!, "*n")
:
PROC format.n (RESULT MOBILE []BYTE string)
  INITIAL INT len IS 0:
  INITIAL INT pos IS 0:
  SEQ
    len := len + 1
    string := MOBILE [len]BYTE
    [string FROM pos FOR 1] := "*n"
    pos := pos + 1
:
PROC trace.n ()
  SEQ
    format.trace ("*n")
:
